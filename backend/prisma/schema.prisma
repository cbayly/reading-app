generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Parent {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  // Relations
  students     Student[]
  
  @@map("parents")
}

model Student {
  id         Int      @id @default(autoincrement())
  parentId   Int      @map("parent_id")
  name       String
  birthday   DateTime
  gradeLevel Int      @map("grade_level")
  interests  String  // Comma-separated values (e.g., "sports,reading,music")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  parent      Parent       @relation(fields: [parentId], references: [id], onDelete: Cascade)
  assessments Assessment[]
  plans       Plan[]
  plan3s      Plan3[]
  genreHistory StudentGenreHistory[]
  activityProgress ActivityProgress[]
  
  @@map("students")
}

model Assessment {
  id                Int      @id @default(autoincrement())
  studentId         Int      @map("student_id")
  status            String   @default("not_started") // not_started, in_progress, completed, abandoned
  passage           String?
  questions         Json?
  studentAnswers    Json?    @map("student_answers")
  readingTime       Int?     @map("reading_time")
  errorCount        Int?     @map("error_count")
  wpm               Float?
  accuracy          Float?
  compositeScore    Float?   @map("composite_score")
  fluencyScore      Float?   @map("fluency_score")
  compVocabScore    Float?   @map("comp_vocab_score")
  readingLevelLabel String?  @map("reading_level_label")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("assessments")
}

model Benchmark {
  id    Int @id @default(autoincrement())
  grade Int @unique
  wpm   Int
  
  @@map("benchmarks")
}



model GenreWord {
  id      Int     @id @default(autoincrement())
  word    String  @unique
  listType String @map("list_type") // 'A' for Setting/Style/Time, 'B' for Genre/Theme
  minAge  Int?    @map("min_age") // Minimum age for this word to be appropriate
  maxAge  Int?    @map("max_age") // Maximum age for this word to be appropriate
  active  Boolean @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("genre_words")
}

model StudentGenreHistory {
  id            Int      @id @default(autoincrement())
  studentId     Int      @map("student_id")
  genreCombination String @map("genre_combination") // e.g., "Futuristic Mystery"
  usedAt        DateTime @default(now()) @map("used_at")
  
  // Relations
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // Indexes for efficient queries
  @@index([studentId, usedAt(sort: Desc)])
  @@index([genreCombination])
  
  @@map("student_genre_history")
}

model Plan {
  id            Int      @id @default(autoincrement())
  studentId     Int      @map("student_id")
  name          String   // From story title
  theme         String   // From story themes array
  status        String   @default("active") // active, completed
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  story         Story?
  days          Day[]
  
  // Indexes for efficient queries
  @@index([studentId, createdAt(sort: Desc)])
  @@index([status])
  
  @@map("plans")
}

model Story {
  id            Int      @id @default(autoincrement())
  planId        Int      @unique @map("plan_id")
  title         String
  themes        Json     // Array of theme strings
  part1         String   // Chapter 1 content
  part2         String   // Chapter 2 content
  part3         String   // Chapter 3 content
  vocabulary    Json     // Array of {word: string, definition: string} objects
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  plan          Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@map("stories")
}

model Day {
  id            Int      @id @default(autoincrement())
  planId        Int      @map("plan_id")
  dayIndex      Int      @map("day_index") // 1-5
  state         String   @default("locked") // locked, available, complete
  completedAt   DateTime? @map("completed_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  plan          Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  activities    Activity[]
  
  // Constraints and indexes
  @@unique([planId, dayIndex])
  @@index([planId, state])
  @@index([planId, dayIndex])
  
  @@map("days")
}

model Activity {
  id            Int      @id @default(autoincrement())
  dayId         Int      @map("day_id")
  type          String   // matching, reflection, writing, multi-select
  prompt        String
  data          Json     // Activity-specific data (e.g., matching pairs, options)
  response      Json?    // Student's response
  isValid       Boolean? @map("is_valid") // Whether the response meets validation criteria
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  day           Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)
  
  // Indexes for efficient queries
  @@index([dayId, type])
  @@index([isValid])
  
  @@map("activities")
}

// 3-Day Plan Models (New streamlined system)
model Plan3 {
  id          String   @id @default(cuid())
  studentId   Int      @map("student_id")
  name        String   // From story title
  theme       String   // From story themes array
  status      String   @default("active") // active, completed
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  story       Story3?
  days        Plan3Day[]
  activityContents ActivityContent[]
  activityProgress ActivityProgress[]
  
  // Indexes for efficient queries
  @@index([studentId, createdAt(sort: Desc)])
  @@index([status])
  
  @@map("plan3s")
}

model Story3 {
  id            String   @id @default(cuid())
  plan3Id       String   @unique @map("plan3_id")
  title         String
  themes        Json     // Array of theme strings
  part1         String   // Chapter 1 content (350-500 words)
  part2         String   // Chapter 2 content (350-500 words)
  part3         String   // Chapter 3 content (350-500 words)
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  plan3         Plan3    @relation(fields: [plan3Id], references: [id], onDelete: Cascade)
  
  @@map("story3s")
}

model Plan3Day {
  id        String   @id @default(cuid())
  plan3Id   String   @map("plan3_id")
  index     Int      // 1-3 (corresponds to chapter number)
  state     String   @default("locked") // locked, available, complete
  completedAt DateTime? @map("completed_at")
  answers   Json?    // Activity responses: {who: string[], where: string, sequence: string[], mainIdea: string, predict: string}
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  plan3     Plan3    @relation(fields: [plan3Id], references: [id], onDelete: Cascade)
  
  // Constraints and indexes
  @@unique([plan3Id, index])
  @@index([plan3Id, state])
  @@index([plan3Id, index])
  
  @@map("plan3_days")
}

// Enhanced Activity Models
model ActivityContent {
  id            String   @id @default(cuid())
  plan3Id       String   @map("plan3_id")
  dayIndex      Int      @map("day_index")
  activityType  String   @map("activity_type") // who, where, sequence, main-idea, vocabulary, predict
  content       Json     // AI-generated content for the activity
  studentAge    Int      @map("student_age")
  contentHash   String   @map("content_hash") // For cache invalidation
  expiresAt     DateTime? @map("expires_at") // For cache TTL
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  plan3         Plan3    @relation(fields: [plan3Id], references: [id], onDelete: Cascade)
  
  // Constraints and indexes
  @@unique([plan3Id, dayIndex, activityType])
  @@index([plan3Id, dayIndex])
  @@index([contentHash])
  @@index([expiresAt])
  
  @@map("activity_contents")
}

model ActivityProgress {
  id            String   @id @default(cuid())
  studentId     Int      @map("student_id")
  plan3Id       String   @map("plan3_id")
  dayIndex      Int      @map("day_index")
  activityType  String   @map("activity_type") // who, where, sequence, main-idea, vocabulary, predict
  status        String   @default("not_started") // not_started, in_progress, completed
  startedAt     DateTime? @map("started_at")
  completedAt   DateTime? @map("completed_at")
  timeSpent     Int?     @map("time_spent") // Time spent in seconds
  attempts      Int      @default(0)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  plan3         Plan3    @relation(fields: [plan3Id], references: [id], onDelete: Cascade)
  responses     ActivityResponse[]
  
  // Constraints and indexes
  @@unique([studentId, plan3Id, dayIndex, activityType])
  @@index([studentId, plan3Id, dayIndex])
  @@index([status])
  @@index([completedAt])
  
  @@map("activity_progress")
}

model ActivityResponse {
  id            String   @id @default(cuid())
  progressId    String   @map("progress_id")
  question      String   // The question or prompt that was answered
  answer        Json     // Student's answer (could be string, array, object)
  isCorrect     Boolean? @map("is_correct")
  feedback      String?  // AI-generated feedback
  score         Float?   // Numerical score if applicable
  timeSpent     Int?     @map("time_spent") // Time spent on this specific response
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  progress      ActivityProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  
  // Indexes for efficient queries
  @@index([progressId])
  @@index([isCorrect])
  @@index([createdAt])
  
  @@map("activity_responses")
}