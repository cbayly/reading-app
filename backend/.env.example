# Reading App Backend Environment Configuration
# Copy this file to .env and update the values as needed

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Database connection URL (SQLite for development)
DATABASE_URL="file:./dev.db"

# =============================================================================
# JWT CONFIGURATION
# =============================================================================

# Secret key for JWT token signing (generate a strong random string)
JWT_SECRET="your-super-secret-jwt-key-here"

# JWT token expiration time (in seconds)
JWT_EXPIRES_IN="24h"

# =============================================================================
# AI MODEL CONFIGURATION
# =============================================================================

# OpenAI API Key (required for all AI content generation)
OPENAI_API_KEY="your-openai-api-key-here"

# =============================================================================
# AI MODEL OVERRIDE CONFIGURATION
# =============================================================================
# These environment variables allow you to override the default AI models
# used for different types of content generation during development and testing.
#
# Default Models:
# - Story Creation: gpt-4o (for creative, engaging narratives)
# - Assessment Creation: gpt-4-turbo (for structured content)
# - Daily Task Generation: gpt-4-turbo (for consistent, fast responses)
#
# Supported Models:
# - gpt-4o: Latest GPT-4 model with improved performance
# - gpt-4-turbo: Fast, cost-effective GPT-4 variant
# - gpt-3.5-turbo: Legacy model (not recommended for new content)
#
# Usage Examples:
# - Set OVERRIDE_STORY_MODEL=gpt-4-turbo to test story generation with GPT-4-turbo
# - Set OVERRIDE_ASSESSMENT_MODEL=gpt-4o to use GPT-4o for assessments
# - Set OVERRIDE_DAILY_TASK_MODEL=gpt-3.5-turbo to test with legacy model
#
# Note: Invalid model names will be ignored and default models will be used.
# Overrides are logged to the console when active.

# Override model for story creation (stories, chapters, narratives)
# Default: gpt-4o
# Options: gpt-4o, gpt-4-turbo, gpt-3.5-turbo
OVERRIDE_STORY_MODEL=""

# Override model for assessment creation (reading passages, questions, vocabulary)
# Default: gpt-4-turbo
# Options: gpt-4o, gpt-4-turbo, gpt-3.5-turbo
OVERRIDE_ASSESSMENT_MODEL=""

# Override model for daily task generation (activities, exercises, games)
# Default: gpt-4-turbo
# Options: gpt-4o, gpt-4-turbo, gpt-3.5-turbo
OVERRIDE_DAILY_TASK_MODEL=""

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server port (default: 5050)
PORT=5050

# Node environment (development, production, test)
NODE_ENV="development"

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# Allowed origins for CORS (comma-separated list)
# For development, you can use "*" to allow all origins
CORS_ORIGIN="http://localhost:3000,http://localhost:3001"

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log level (error, warn, info, debug)
LOG_LEVEL="info"

# Enable detailed AI model usage logging
AI_LOGGING_ENABLED="true"

# =============================================================================
# DEVELOPMENT TOOLS
# =============================================================================

# Enable Prisma Studio (database GUI)
# Set to "true" to enable Prisma Studio on startup
ENABLE_PRISMA_STUDIO="false"

# Prisma Studio port (default: 5555)
PRISMA_STUDIO_PORT=5555

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Test database URL (for running tests)
TEST_DATABASE_URL="file:./test.db"

# Mock OpenAI API for tests
MOCK_OPENAI="false"

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Rate limiting (requests per minute per IP)
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# CONTENT GENERATION SETTINGS
# =============================================================================

# Maximum tokens for story generation
STORY_MAX_TOKENS=4000

# Maximum tokens for assessment generation
ASSESSMENT_MAX_TOKENS=3000

# Maximum tokens for daily task generation
DAILY_TASK_MAX_TOKENS=2000

# Temperature for AI generation (0.0 = deterministic, 1.0 = creative)
AI_TEMPERATURE=0.7

# =============================================================================
# CACHING CONFIGURATION
# =============================================================================

# Enable response caching
ENABLE_CACHING="true"

# Cache TTL in seconds
CACHE_TTL=3600

# =============================================================================
# MONITORING AND ANALYTICS
# =============================================================================

# Enable usage analytics
ANALYTICS_ENABLED="false"

# Analytics endpoint (if using external service)
ANALYTICS_ENDPOINT=""

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

# Application URL (for generating absolute URLs)
APP_URL="http://localhost:5050"

# Frontend URL (for CORS and redirects)
FRONTEND_URL="http://localhost:3000"

# =============================================================================
# NOTES AND BEST PRACTICES
# =============================================================================
#
# 1. NEVER commit your actual .env file to version control
# 2. Keep your JWT_SECRET secure and unique per environment
# 3. Use strong, randomly generated secrets for production
# 4. Monitor your OpenAI API usage and costs
# 5. Test model overrides in development before production
# 6. Use environment-specific .env files (.env.development, .env.production)
# 7. Regularly rotate API keys and secrets
# 8. Monitor logs for any model override warnings
#
# For production deployment:
# - Set NODE_ENV=production
# - Use a proper database (PostgreSQL, MySQL)
# - Configure proper CORS origins
# - Set up monitoring and logging
# - Use environment variables from your hosting platform
# - Disable development tools (Prisma Studio, etc.)
#
# For testing:
# - Use TEST_DATABASE_URL for test database
# - Set MOCK_OPENAI=true to avoid API calls during tests
# - Use separate API keys for testing if needed 